1，脚本的位置
延迟脚本：
外部的JavaScript代码一般放在</body>标签之前，比如：
    <body>
        <script type="text/javascript" src="ecma.js"></script>
    </body>
也可以放在head标签中，但是要使用defer属性,使用该属性后js代码遇到</html>结束标签才会执行，
在实际开发过程中最好只使用一个延迟脚本，而且该属性只适用于外部脚本文件，注意，在XHTML中，规定defer=“defer”
    <body>
        <script type="text/javascript" defer="defer" src="ecma.js"></script>
    </body>

异步脚本：
HTML5<script>元素定义了async属性，该属性与async类似，都用于改变处理脚本的行为。同样该属性只适用于外部脚本，
async属性的作用是不让页面等待两个脚本的下载和执行，从而异步加载页面其他内容，该属性没有属性值
    <body>
        <script type="text/javascript" async  src="ecma1.js"></script>
        <script type="text/javascript" async  src="ecma2.js"></script>
    </body>
加上该属性后，两个脚本文件互不依赖。
2，ECMAScript
1）区分大小写
ECMAScript中的一切（变量、函数、操作符）都区分大小写
2）标识符
即变量、函数、属性的名字，或者函数的参数，标识符一般采用驼峰大小写的格式
命名规则：首字符必须是字母、下划线或美元符号，其他字符可以是字母、数字、下划线和美元符号
注意：不能把关键字、保留字、布尔符号（true、false）和null用作标识符
3）注释
单行注释：//
多行注释：
/*   
xxxxxx
xxxxxx
*/
4)严格模式
“use strict”；
5）数据类型
ECMAScript中共有五种简单数据类型（Undefined、Null、Boolean、Number和String）和一种复杂数据类型Object
Undefined：未初始化的变量和未定义的变量默认取得undefined值，实际上，undefined值是派生自null值的，因此在ECMA-262中规定
alert（null==undefined）；该语句要返回一个true
Null：空对象指针，如果一个变量在将来用于保存对象，那么最好将该变量初始化为null
Boolean：该类型只有两个字面值，即true和false，区分大小写，但这两个值和数字1和0并不是一回事，true不一定等于1，false不一定等
于0
Number：十进制值 八进制值 十六进制值 二进制值
String：字符串类型，可用单引号和双引号表示
String数据类型包含一些特殊的字符字面量，也叫转义字符，比如\n（换行）\t（制表）等
字符串可以拼接：var lang = "Java"；lang = lang + “Script”；此时lang的值为“JavaScript”
Object：ECMAScript中的对象其实就是一组数据和功能的集合
6）typeof操作符
对一个值使用操作符可能返回下列某个字符串：
“undefined”-值未定义
“boolean”-值是布尔值
“string”-值是字符串
“number”-值是数值
“object”-值是对象或null
“function”-值是函数
注意，typeof是一个操作符，不是一个函数，特殊值null会被认为是一种空的对象引用
在技术角度来说，函数在ECMAScript中是对象，而不是一种数据类型
7）特殊值NaN（Not a Number）
即非数值，这个数值用于表示一个本来要返回的操作数为返回数值的情况（这样就不会抛出错误了）
例如，在ECMAScript中，任何数值除以0会返回NaN（注：实际上0除以0才会返回NaN，正数除以0返回Infinity（正无穷大），负数除以0返回-Infinity（负无穷大））
特点：任何涉及NAN的操作（例如NAN/0）都会返回NaN；NaN与任何值都不相等，包括NaN本身
针对这两个特点，ECMAScript定义了isNaN（）函数，该函数接受一个参数（任何类型），帮我们确定参数是否“不是数值”，
isNaN（）在接收到一个值之后，会尝试将这个值转换为数值，某些不是数值的值会直接转换为数值，例如字符串“10”，而
任何不能转换为数值的值都会导致这个函数返回true。
8）数值转换
有3个函数可以把非数值转换为数值：Number（）、parseInt（）和parseFloat（）
Number（）适用于任何数据类型，而parseInt（）和parseFloat（）专门用于将字符串转换为数值
9）理解函数的参数
ECMAScript中的参数在内部是用一个数组来表示的，函数接收到的都是这个数组，而不关心数组中包含哪些参数

3,不仅每一个元素是一个对象，每一个元素的style属性也是对象，而style对象的属性值是字符串；nodeName属性也是字符串；
当你需要引用一个中间带减号的属性时，DOM要求你使用驼峰命名法

4，创建Object实例的两种方法
1）使用new操作符后跟object构造函数
var person = new Object();
person.name = "Nicholas";
person.age = 29;
2)使用对象字面量表示法
var person = {
     name = "luce",
     age = 19
}；
如果创建对象实例的过程不创建属性和方法，则可以使用
var person =｛｝；该用法的效果与new Object（）相同
属性之间用逗号隔开

5，数组对象
创建数组的两种方式
1）var colors = new array（“red”，“blue”）；其中new操作符可省略
2）数字字面量表示法
var colors = ["red","blue"];

判断一个对象是不是数组的问题：
对于一个网页，或者一个全局作作用域而言，使用instanceof就能解决
if（value instanceof Array）
对于多个作用域，ECMAScript新增了Array.isArray()方法
if（Array.isArray(value);

转换方法：
所有对象都有toLocalString（）、toString（）、valueOf（）方法具体看书


